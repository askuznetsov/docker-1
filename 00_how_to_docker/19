# Launch a container name Abathur. It will be a Python container,
# 2-slim version, its /root folder will be bound to a HOME folder
# on your host, and its 3000 port will be bound to the 3000 port
# of your virtual machine. You will personalize this container so
# that you can use the Flask micro-framework in its latest version.
# You will make sure that an html page displaying "Hello World"
# with <h1> tags can be served by Flask. You will test that your
# container is properly set up by accessing, via curl or a web browser,
# the IP address of your virtual machine on the 3000 port.
# You will also list all the necessary commands in your repository.

# --volume , -v		Bind mount a volume
# The docker exec command runs a new command in a running container.
# -----------------------------------------------------------------------------------------------
# A Minimal Application
# A minimal Flask application looks something like this:

# from flask import Flask
# app = Flask(__name__)
#
# @app.route('/')
# def hello_world():
#     return 'Hello, World!'
# To run the application you can either use the flask command or pythonâ€™s -m switch with Flask. # Before you can do that you need to tell your terminal the application to work with by 
# 
# exporting the FLASK_APP environment variable:
# 
# $ export FLASK_APP=hello.py
# $ flask run
#  * Running on http://127.0.0.1:5000/
# -----------------------------------------------------------------------------------------------

docker run --name Abathur -v ~/test_docker:/root -dit -p 3000:3000 python:2-slim
docker exec Abathur pip install Flask
echo 'from flask import Flask\napp=Flask(__name__)\n@app.route("/")\ndef hello():\n\treturn "<h1>Hello World !</h1>"\nif __name__ == "__main__": app.run(debug=True,host="0.0.0.0") ' > ~/test_docker/hello.py && chmod 777 ~/test_docker/hello.py
docker exec --env FLASK_APP=/root/hello.py Abathur flask run --host=0.0.0.0 --port=3000
